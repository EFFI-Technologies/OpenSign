name: Production-Backend-Deploy

on:
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  id-token: write  # Allow GitHub to issue an OIDC token for authentication

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t open-sign-server:latest -f apps/OpenSignServer/Dockerfile .

      # Step 4: Configure AWS credentials from OIDC Provider
      - name: Configure AWS credentials from OIDC Provider
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_PRODUCTION_ROLE }}  # IAM Role ARN to assume
          aws-region: ${{ secrets.AWS_REGION }}  # AWS region (make sure this is set as a secret)
          role-session-name: EFFI-GitHub-CI-CD-GitHub-Runner
          role-duration-seconds: 900  # Duration of the session (15 minutes)

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private
          registries: |
            241924812472.dkr.ecr.ap-southeast-2.amazonaws.com  # Your ECR registry URI

      # Step 6: Tag Docker image for ECR
      - name: Tag Docker image
        run: |
          IMAGE_TAG=latest
          REPOSITORY_URI=241924812472.dkr.ecr.ap-southeast-2.amazonaws.com/opensign-service-api-saas-production
          docker tag open-sign-server:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG

      # Step 7: Push Docker image to Amazon ECR
      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG=latest
          REPOSITORY_URI=241924812472.dkr.ecr.ap-southeast-2.amazonaws.com/opensign-service-api-saas-production
          docker push $REPOSITORY_URI:$IMAGE_TAG

      # Step 8: Retrieve and update ECS task definition
      - name: Retrieve latest ECS task definition
        run: |
          TASK_DEFINITION_FAMILY="opensign-service-api-saas-production"
          CLUSTER_NAME="ECS-Cluster-SAAS-Production"
          SERVICE_NAME="opensign-service-api-saas-production"
          IMAGE_URI="$REPOSITORY_URI:latest"

          # Fetch the latest revision of the task definition
          LATEST_TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query "taskDefinition.revision" --output text)

          # Register a new revision of the task definition with the updated image
          NEW_TASK_DEFINITION=$(aws ecs register-task-definition \
            --family $TASK_DEFINITION_FAMILY \
            --container-definitions "[{\"name\":\"$SERVICE_NAME\",\"image\":\"$IMAGE_URI\",\"essential\":true}]")

          # Update ECS service with the new task definition revision
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --task-definition $NEW_TASK_DEFINITION
