name: Production-Backend-Deploy

on:
  workflow_dispatch:  # Allows manual trigger of the workflow

permissions:
  id-token: write  # Allow GitHub to issue an OIDC token for authentication

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t open-sign-server:latest -f apps/OpenSignServer/Dockerfile .

      # Step 4: Configure AWS credentials from OIDC Provider
      - name: Configure AWS credentials from OIDC Provider
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::241924812472:role/EFFI-GITHUB-CICD-Role  # IAM Role ARN to assume
          aws-region: ${{ secrets.AWS_REGION }}  # AWS region (make sure this is set as a secret)
          role-session-name: GitHub-CI-CD-Session
          role-duration-seconds: 900  # 15 minutes

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private
          registries: "241924812472.dkr.ecr.ap-southeast-2.amazonaws.com"  # Full ECR registry URL

      # Step 6: Tag Docker image for ECR
      - name: Tag Docker image
        run: |
          IMAGE_TAG=latest
          REPOSITORY_URI=241924812472.dkr.ecr.ap-southeast-2.amazonaws.com/opensign-service-api-saas-production
          docker tag open-sign-server:$IMAGE_TAG $REPOSITORY_URI:$IMAGE_TAG

      # Step 7: Push Docker image to Amazon ECR
      - name: Push Docker image to ECR
        run: |
          IMAGE_TAG=latest
          REPOSITORY_URI=241924812472.dkr.ecr.ap-southeast-2.amazonaws.com/opensign-service-api-saas-production
          docker push $REPOSITORY_URI:$IMAGE_TAG
